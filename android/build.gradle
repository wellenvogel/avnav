import java.text.SimpleDateFormat

def taskgroup = 'avnav'
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.1'
    }
}
repositories{
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
    maven {
        url 'https://maven.google.com/'
        name 'Google'
    }
}

apply plugin: 'com.android.application'

dependencies {
    //implementation fileTree(dir: 'libs', include: '*.jar')
    implementation "net.sf.marineapi:marineapi:0.11.0"
    implementation "com.android.support:support-compat:26.0.0"
    implementation 'com.android.support:appcompat-v7:26.0.0'
    implementation 'com.github.felHR85:UsbSerial:4.5'
    implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.0'
}

File srcBase = new File(project.rootDir, "src" + File.separator + "main")
File assetsDir = new File(project.rootDir, "assets")
if (! project.hasProperty('packageVersion')){
    SimpleDateFormat f=new SimpleDateFormat('yyyyMMdd')
    project.ext.avnavVersion=f.format(new Date())
}
else{
    project.ext.avnavVersion=project.packageVersion
}


android {
    defaultConfig{
        applicationId "de.wellenvogel.avnav.main"
        versionName "avnav-$avnavVersion"
        versionCode Integer.parseInt(project.avnavVersion)
        manifestPlaceholders(['label':'avNav'])
        targetSdkVersion 29
        multiDexEnabled true //https://stackoverflow.com/questions/60919046/how-to-fix-build-gradle
        minSdkVersion 19
        buildConfigField "long", "TIMESTAMP", System.currentTimeMillis() + "L"
    }
    lintOptions {
        abortOnError false
    }
    aaptOptions{
        noCompress '.json'
    }
    //original:
    compileSdkVersion 29

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = [new File(srcBase, "java")]
            resources.srcDirs = [new File(srcBase, "resources")]
            aidl.srcDirs = [srcBase]
            renderscript.srcDirs = [srcBase]
            res.srcDirs = ['res']
            assets.srcDirs = [assetsDir]
        }



        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {

    def ks=System.getenv("ANDROID_KEYSTORE")
    def kspw=System.getenv("ANDROID_KEYPASS")
    def kalias=System.getenv("ANDROID_KEYALIAS")
    def kpw= System.getenv("ANDROID_KEYPASS")
    if (ks != null && ksp != null && kalias != null && kpwd != null) {
        config {
            storeFile file(ks)
            storePassword kspw
            keyAlias kalias
            keyPassword kpw
        }
    }
    else{
        logger.warn("no signing config set...")
    }
    }
    //see http://stackoverflow.com/questions/18332474/how-to-set-versionname-in-apk-filename-using-gradle
    buildTypes {
        release {
            if (System.getenv("ANDROID_KEYSTORE") != null) {
                signingConfig signingConfigs.config
            }
        }
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders( ['label':'avNav-debug'])
        }
        beta {
            if (System.getenv("ANDROID_KEYSTORE") != null) {
                signingConfig signingConfigs.config
            }
            else{
                signingConfig buildTypes.debug.signingConfig
            }
            applicationIdSuffix ".beta"
            manifestPlaceholders(['label':'avNav-beta'])
        }
    }
    applicationVariants.all { variant ->
        project.logger.lifecycle("Variant: " + variant.getName())
        def vname=variant.getName()
        def version=defaultConfig.versionCode
        variant.outputs.each { output ->
            def name=output.outputFileName
            def sign=""
            if (name.matches(/.*unsigned.*/)) sign="-unsigned"
            output.outputFileName="avnav-$vname$sign-${version}.apk"
            logger.lifecycle("rename Outfile $name to $output.outputFileName")
        }
    }
}

File viewerDir = new File(project.rootDir, ".." + File.separator + "viewer"+File.separator+"build")

task buildViewerRelease(type: org.gradle.api.tasks.GradleBuild) {
    group = taskgroup
    setDir "../viewer"
    setTasks(["release"])
    startParameter.projectProperties.put("packageVersion",project.avnavVersion)
}
task buildViewerDebug(type: org.gradle.api.tasks.GradleBuild) {
    group = taskgroup
    setDir "../viewer"
    setTasks(["debug"])
    startParameter.projectProperties.put("packageVersion",project.avnavVersion)
}

task cleanViewer(type: GradleBuild){
    group = taskgroup
    setDir "../viewer"
    setTasks(["clean"])
}

task copyToAssetsViewerDebug(type: org.gradle.api.tasks.Copy) {
    group = taskgroup
    from("$viewerDir/debug")
    into new File(assetsDir, "viewer")
}
copyToAssetsViewerDebug.dependsOn(buildViewerDebug)
task copyToAssetsViewerRelease(type: org.gradle.api.tasks.Copy) {
    group = taskgroup
    from("$viewerDir/release")
    into new File(assetsDir, "viewer")
}
copyToAssetsViewerRelease.dependsOn(buildViewerRelease)

task copySounds(type: org.gradle.api.tasks.Copy) {
    group = taskgroup
    from("../sounds")
    into new File(assetsDir, "sounds")
}
copyToAssetsViewerRelease.dependsOn(copySounds)
copyToAssetsViewerDebug.dependsOn(copySounds)

afterEvaluate {
    generateDebugAssets.dependsOn(copyToAssetsViewerDebug)
    generateReleaseAssets.dependsOn(copyToAssetsViewerRelease)
    generateBetaAssets.dependsOn(copyToAssetsViewerRelease)
}


clean.delete.add "assets/viewer"
clean.dependsOn cleanViewer




