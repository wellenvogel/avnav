group 'de.wellenvogel.avnav'
apply plugin: 'java'

def revision="4"
def mobacJar="Mobile_Atlas_Creator.jar"

repositories {
    mavenCentral()
    maven {
        // required for javax.media:jai-core:1.1.3
        url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases/"
    }
}
dependencies{
    compile files("$rootDir"+File.separator+"lib"+File.separator+mobacJar)
    compile([name:"jakarta.xml.bind-api",group:"jakarta.xml.bind",  version:"3.0.0"])
}
def srcbase=new File(project.rootDir,"src")
def srcsub="mobac"+File.separator+"mapsources"+File.separator+"mappacks"+File.separator+"avnavbase"
sourceSets.main.java.setSrcDirs([srcbase])

task copyDefs(type: org.gradle.api.tasks.Copy) {
    from new File(srcbase, srcsub), {
        include "*png"
        include "*properties"
        include "*list"
    }
    into new File(sourceSets.main.output.classesDirs[0],srcsub)
    outputs.upToDateWhen {false}
}

task writeVersion{
    doLast{
    def outfile=new File(new File(sourceSets.main.output.classesDirs[0],srcsub),
        "mappack.properties")
    outfile.withWriter {
        out->
            out.println("mappack.revision="+revision)
    }
    }
}
writeVersion.dependsOn classes
jar.dependsOn writeVersion
jar.dependsOn copyDefs
println("##: classes dir ${sourceSets.main.output.classesDirs[0]}")
jar{
    archiveName="mp-avnavbase.jar"
    manifest.getAttributes().with{
        put 'MapPackVersion', '${mobac.mappackversion}'
        put 'MapPackRevision',revision
        put 'MapPackName','avnavbase'
        put 'MapPackBuild-Date',new Date().format("yyyy-MM-dd HH:mm:ss")
    }
    from new File(sourceSets.main.output.classesDirs[0],srcsub),{
        rename('mapsources.list',"mobac.program.interfaces.MapSource")
        into "META-INF/services/"
        include "mapsources.list"
    }
}

//create a zip file that contains all
task createZip(type: org.gradle.api.tasks.bundling.Zip){
    archiveName="avnav-mapsources.zip"
    destinationDir new File(project.buildDir,"libs")
    from jar.archivePath
    from project.rootDir,{
        include "*exml"
        include "README.txt"
    }
    doLast{
        logger.lifecycle("created "+archivePath)
    }
}
createZip.dependsOn(build)

def testdir=new File(project.buildDir,"test")
def testmapsrc=new File(testdir,"mapsources")
task prepareTest(type: org.gradle.api.tasks.Copy){
    from project.libsDir,{
        include "*.jar"
        into "mapsources"
    }
    from project.rootDir,{
        include "*.exml"
        into "mapsources"
    }
    from new File(project.rootDir,"lib"),{
        include mobacJar
    }
    into testdir
    doFirst{
        if (! testmapsrc.exists()){
            testmapsrc.mkdirs()
        }
    }
}





copyDefs.dependsOn classes
jar.dependsOn copyDefs


