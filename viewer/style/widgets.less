@import "flexbox.less";
@import "defines.less";

@x: rgba(255, 20, 7, 0.54);

@horizontalContainerHeight: 4em;
@horizontalContainerDoubleHeight: 7.9em;
@horizontalWidgetHeight: 3.8em;
@infoFontSize: 0.71em;


.widget{
  position: relative;
  z-index: 100;
  padding: 0.3em;
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),
  0 1px 5px 0 rgba(0, 0, 0, 0.12),
  0 3px 1px -2px rgba(0, 0, 0, 0.2); /* z1 shadow */
  .border-box();
  overflow: hidden;
  pointer-events: all;
  background: white;
  .nightColors();
  .flex-shrink(0);
  .flex-grow(1);
  margin-bottom: 0.1em;
  margin-top: 0.1em;
  margin-left: 0.1em;
  margin-right: 0.1em;
  .widgetInfo(){
    font-size: @infoFontSize;
    position: absolute;
    top: 0;
    opacity: 0.7;
  }
  .infoRight{
    .widgetInfo();
    right: 0.2em;
  }
  .infoLeft{
    .widgetInfo();
    left: 0.2em;
  }
  .unit{
    font-size: @infoFontSize;
    opacity: 0.7;
    margin-left: 0.2em;
  }
  .widgetData{
    text-align: right;
    max-width: 100%;
    max-height: 100%;
  }
  &.average .infoLeft{
    .nightForeColor(red);
  }

  .label {
    .mdText2();
  }
  .editing &{
    .flex-grow(0);
  }
}

.widgetContainer{
  font-size: @widgetFontSize;
  .flex-display();
  .widget{
    .flex-shrink(0);
  }
  overflow: hidden;
  background-color: @colorMain;
  .nightColors();
  .flex-shrink(0);
}
.widgetContainer.horizontal{
  .flex-wrap(wrap);
  max-height: @horizontalContainerHeight;
  .twoRows &{
    max-height: @horizontalContainerDoubleHeight;
  }
  .widget{
    height: @horizontalWidgetHeight;
  }
  .editing &{
    .flex-wrap(nowrap);
    min-height: @horizontalContainerHeight;
  }
}

.widgetContainer.vertical{
  overflow: hidden;
  .flex-direction(column);
  .flex-justify-content(flex-end);
  .widget{
    max-width: @navLeftWidgetWidth;
    width: @navLeftWidgetWidth;
    flex-shrink: inherit;
  }
  .editing &{
    top: 0;
    min-width: 8em;
  }
}

//------------------ dedicated widgets -------------------------
//widgets have their name from the widget list and maybe some additonial fixed name as classes
@bigFont: 3em;
@bigFontVertical: 2em;
@smallFont: 1em;
@timeFont: 1.5em;
@clockFont: 2.5em;
@size1: 7em;
@size2: 11em;
.widget{
  .bigWidget(@size){
    .widgetData{
      font-size: @bigFont;
    }
    width: @size;
    .vertical &{
      width: inherit;
      .widgetData{
        font-size: @bigFontVertical;
      }
    }
  }
  .smallWidget(@size){
    .widgetData{
      font-size: @smallFont;
      padding-top: 0.55em;
      padding-right: 0.1em;
    }
    width: @size;
    .vertical &{
      width: inherit;
      .widgetData{
        font-size: @smallFont;
      }
    }
  }
  .timeWidget(@font){
    .widgetData{
      font-size: @font;
    }
    width: 7em;
    .vertical &{
      width: inherit;
      .widgetData{
        font-size: @font;
      }
    }
  }
  &.SOG{
    .bigWidget(@size2);
  }
  &.VMG{
    .bigWidget(@size2);
  }
  &.COG{
    .bigWidget(@size1);
  }
  &.BRG{
    .bigWidget(@size1);
  }
  &.DST{
    .bigWidget(@size2);
  }
  &.WindAngle,&.WindSpeed{
    .bigWidget(@size1);
  }
  &.AnchorBearing{
    .bigWidget(@size1);
  }
  &.AnchorDistance{
    .bigWidget(@size2);
  }
  &.AnchorWatchDistance{
    .bigWidget(@size1);
  }
  &.RteDistance{
    .bigWidget(@size2);
  }
  &.RteDistance{
    .timeWidget(@timeFont);
  }
  &.LargeTime{
    .timeWidget(@clockFont);
  }
  &.zoomWidget{
    .smallWidget(@size1);
    .widgetData{
      text-align: center;
      font-size: @timeFont;
    }
    .vertical &{
      .widgetData{
        font-size: @timeFont;
      }
    }
    .rzoom{
      display: inline-block;
    }
  }
  &.Position,&.WpPosition{
    .smallWidget(@size1);
    .widgetData{
      text-align: center;
    }
  }
  &.timeStatusWidget{
    .smallWidget(@size1);
    .status{
      width: 1.5em;
      height: 1.5em;
      text-align: center;
      margin-left: auto;
      margin-right: auto;
      display: block;
    }
    .widgetData{
      text-align: center;
    }
  }
  &.etaWidget{
    .smallWidget(@size1);
    .widgetData{
      text-align: center;
      &.markerName{
        margin-top: 0;
      }
    }
  }
  &.aisTargetWidget{
    .smallWidget(@size1);
    .nightBackColor(@colorSecond);
    .aisFront{
      display: inline-block;
      font-size: 1.5em;
    }
    .label{
      width: 2em;
    }
    .widgetData ~ .widgetData{
      padding-top: 0;
    }
    .hfield &{
      .flex-direction(row)!important;
      .aisPart{
        .flex(1);
      }
    }
  }

  &.activeRouteWidget{
    .smallWidget(@size1);
    .routeName{
      margin-top: 0.8em;
      margin-right: 0.2em;
      .mdText2();
      overflow: hidden;
      white-space: nowrap;
    }
    .routeRemain{
      font-size: 1.5em;
    }
    &.approach{
      .nightBackFade(@routeApproachingColor);
    }
  }
  &.editRouteWidget{
    border: 3px solid;
    .nightBorderFade(@colorGreen);
    &.activeRoute{
      .nightBorderFade(@colorRed);
    }
    .smallWidget(@size1);
    .widgetData{
      .routeInfo {
        width: 4.5em;
        display: inline-block;
        .horizontal &{
          width: auto;
          margin-right: 0.3em;
        }
      }
      &.routeName{
        margin-top: 0.5em;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
        .horizontal &{
          text-align: left;
          display: block;
          margin-top: 0.5em;
        }
      }
      .horizontal &{
        margin-top: 0;
        padding-top: 0;
        display: inline-block;
      }

    }

  }

  &.centerDisplayWidget{
    .smallWidget(@size1);
    .widgetData ~ .widgetData{
      margin-top: 0;
    }
    .value{
      display: inline-block;
    }
    .label {
      display: inline-block;
      background-size: 1em 1em;
      background-repeat: no-repeat;
      width: 1em;
      height: 1em;
      float: left;
      &.boat {
        background-image: url(../images/icons-new/boat.svg);
      }
      &.marker {
        background-image: url(../images/icons-new/waypoint.svg);
      }
    }
    .horizontal &{
      min-width: 10em;
    }
  }
  &.windWidget{
    .smallWidget(@size2);
    padding-top: 0;
    padding-left: 0;
    padding-right: 0;
    .widgetData{
      font-size: @timeFont;
    }
    .windInner {
      position: relative;
      padding-top: 0.7em;
      .widgetData{
        padding-top: 0;
        font-size: @timeFont;
      }
      padding-left: 0.3em;
      padding-right: 0.3em;
    }
  }
  &.DepthDisplay{
    .bigWidget(@size1);
  }
  &.xteDisplay{
    .smallWidget(@size1)
  }
  &.windGraphics{
    .smallWidget(@size2);
    .windSpeed {
      text-align: right;
      font-size: @timeFont;
      position: absolute;
      right: 0.2em;
      bottom: 0.2em;
    }
    .horizontal &{
      .widgetData,.windSpeed{
        display: inline-block;
      }
    }
    canvas{
      height: 90%;
      width: 90%;
    }
    .vertical &{
      height: 11em;
    }
  }
  &.routePointsWidget {
    .activeEntry .more {
      display: inline-block;
      position: absolute;
      right: 0;
      top: 20%;
    }
    overflow: hidden;
    .flex-shrink(1) !important;
  }
  &.alarmWidget{
    position: absolute;
    right: 0;
    bottom: 0;
    height: 3em;
    font-size: @timeFont;
    .nightBackFade(@colorRed);
    padding: 1.5em;
    padding-top: 1em;
    margin: 0.5em;
    border-radius: 4px;
    .mdShadow2();
    .widgetContainer &{
      position: inherit;
      padding: inherit;
      height: inherit;
      width: 4em;
      margin: inherit;
    }
  }
  &.combinedWidget{
    padding: 0;
    margin: 0;
  }

  &.canvasGauge {
    canvas {
      margin: auto;
      position: relative;
    }
    .canvasFrame {
      width: 100%;
      height: 100%;
      position: relative;
      .flex-display();
      .flex-align-items(center);
      .flex-justify-content(center);

    }
    .gaugeValue {
      position: absolute;
      top: 53%;
      left: ~"calc(50% - 1em)";
      z-index: 20;
      white-space: pre;
    }
    &.radGauge_Speed{
      .gaugeValue{
        top: 70%;
      }
    }
    &.radGauge_Temperature{
      .gaugeValue{
        top: 70%;
      }
    }
    &.linear{
      padding: 0;
      .canvasFrame{
        padding: 0;
      }
    }
  }


}
