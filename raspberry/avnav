#! /bin/sh
### BEGIN INIT INFO
# Provides:          avnav
# Required-Start:    $remote_fs $syslog $network
# Should-Start:      bluetooth dbus udev
# Should-Stop:      bluetooth dbus udev
# Required-Stop:     $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: AV nav server
# Description:       monitor NMEA data at serial and bluetooth devices and
#                    provide an access to navigation data as a web server
### END INIT INFO

# Author: Andreas Vogel <andreas@wellenvogel.net>
#

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="AV nav server"
NAME=avnav
BASEDIR=/home/pi/avnav
DAEMON=$BASEDIR/program/server/avnav_server.py
CONFIG=$BASEDIR/data/avnav_server.xml
BASECONFIG=$BASEDIR/program/raspberry/avnav_server.xml

#set -x

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions


#find the running process

findProc()
{
	p=`ps -ef | grep avnav_server.py | grep -v grep | grep -v su |awk '{print $2;}'`
	echo $p
}

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	xp=`findProc`
	if [ "$xp" != "" ] ; then
		log_daemon_msg "avnav $DAEMON already running with pid $xp"
		return 1
	fi
	#sometimes gpsd seems to grab our port...
	killall gpsd 2> /dev/null
	if [ "$FORWARD" != "" ]; then
          dip=`getent hosts avnav | awk '{ print $1;}'`
          if [ "$dip" != "" ] ; then
	    log_daemon_msg avnav switching on port forward to port $FORWARD
	    iptables -A PREROUTING -t nat -p tcp --dport 80 -d $dip -j REDIRECT --to-ports $FORWARD
          else
            log_daemon_msg avnav unable to set forwarding as I cannot find my ip
          fi
	fi
	if [ "$HCIDEVICES" != "" ] ; then
		for d in `echo $HCIDEVICES`
		do
		  	log_daemon_msg avnav trying to enable bluetooth device $d
			hciconfig $d up
		done
	fi
	if [ ! -f $CONFIG ] ; then
		log_daemon_msg "trying to intialize $CONFIG"
		cp $BASECONFIG $CONFIG 
		if [ $? != 0 ] ; then
			log_daemon_msg avnav "unable to create $CONFIG"
			return 1
		fi
		chown pi $CONFIG
	fi
	su -c "$DAEMON $CONFIG" pi >/dev/null 2>&1 &
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	xp=`findProc`
	[ "$xp" = "" ] && return 1
	kill $xp
	wt=10
	while [ $wt -gt 0 ] ; do
		kill -0 $xp > /dev/null 2>&1 
		[ $? != 0 ] && wt=0
		wt=`expr $wt - 1`
		sleep 1
	done
	kill -0 $xp > /dev/null 2>&1
	if [ $? = 0 ]  ; then
		kill -9 $xp
	fi
	kill -0 $xp > /dev/null 2>&1
	if [ $? = 0 ]  ; then
		return 2
	fi
	return 0
}

case "$1" in
  start)
      	log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	
	;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  status)
       xp=`findProc`
       if [ "$xp" != "" ] ; then
	  	log_daemon_msg "$NAME is running with pid $xp"
		log_end_msg 0
		
	else
	  	log_daemon_msg "$NAME is not running"
		log_end_msg 1
	fi
       ;;
  reload|force-reload)
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_stop
	do_start
	log_end_msg $?
	;;
  restart)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	 	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $0 {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
