
import java.text.SimpleDateFormat;
def taskgroup="avnav"

buildscript{
	repositories{
		mavenCentral()
	}
    dependencies{
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:8.5.6'
    }
}

repositories{
	mavenCentral()
}

description="Raspberry specfic stuff for avnav"
apply plugin: 'java'

apply plugin: 'nebula.ospackage-base'


def versionFileName="raspi.version"
ospackage {
    //release='3'
    os = LINUX // only applied to RPM
    packageGroup='misc'
    requires 'avnav'
    requires 'parted'
    requires 'bc'
    requires 'hostapd'
    requires 'dnsmasq'
    requires 'mpg123'
    requires 'ntp'
    requires 'avahi-autoipd'
    requires 'python3-smbus' //could basically also directly go to avnav - but outside rpi there is no use case
    packageName='avnav-raspi'
    ['common','wlan0','wlan1','wlan-ap','wlan-ap2'].each { String ext->
        configurationFile("/etc/hostapd/hostapd.conf.$ext")
    }
    configurationFile("/etc/udev/rules.d/010-avnav-net.rules")
    user='root'
    into ('/usr/lib/avnav/raspberry') {
        from('raspberry'){
            fileMode 0755
            include 'hostapd'
            include 'settime.sh'
            include 'restore-iptables.sh'
            include 'sound.sh'
            include 'iptables-ext.sh'
            include 'wpa_supplicant.conf'
            include 'startup-check.sh'
            include 'setup-mcs.sh'
            include 'wpa_action.sh'
            include 'rename-interface.sh'
            include 'checkLink.sh'
        }
        from('raspberry') {
            include 'avnav_server.xml'
            include 'hosts'
            include 'ntp.conf'
            include 'avnav.conf'
            fileMode 0644
        }
    }
    into('/usr/lib/avnav/raspberry/xui'){
        from('raspberry/xui')
    }
    into ('/usr/lib/avnav/raspberry') {
        from(project.buildDir){
            include versionFileName
        }
    }
    into('/usr/lib/systemd/system/avnav.service.d'){
        from('raspberry'){
            include "raspberry.conf"
        }
    }
    into('/usr/lib/systemd/system'){
        from('raspberry'){
            include('avnav-iptables.service')
            include('avnav-startup.service')
        }
    }
    into('/etc/network/interfaces.d'){
        from('raspberry'){
            include('lo')
            include('eth0')
            include('usb0')
            include('wlan0')
            include('wlan1')
            include('wlan-av1')
            include('wlan-ap')
            include('wlan-ap2')
        }
    }
    into('/etc/hostapd'){
        from('raspberry'){
            include('hostapd.conf*')
        }
    }
    into('/etc/sysctl.d'){
        from('raspberry'){
            include('99-zzavnavsysctl.conf')
        }
    }
    into('/etc'){
        from('raspberry'){
            include('iptables.ipv4.nat')
        }
    }
    into('/etc/udev/rules.d'){
        from('raspberry'){
            include('010-avnav-net.rules')
        }
    }
    into('/etc/dnsmasq.d'){
        from('raspberry'){
            include('avnav-dnsmasq.conf')
        }
    }
    into('/etc'){
        from('raspberry'){
            include('dhcpcd.enter-hook')
        }
    }
    into('/etc/modprobe.d'){
        from('raspberry'){
            include('8192cu.conf')
        }
    }
    
    postInstall file('raspberry/postinstall')
    preInstall file('raspberry/preinstall')

}




assert project.hasProperty('packageVersion'),"please provide the package version via -PpackageVersion=xxx"
version=project.packageVersion
task raspiDeb(type: Deb) {
    group taskgroup
    doFirst{
        def vFile=file("$buildDir/$versionFileName")
        logger.info("vfile=${vFile}")
	if (! vFile.getParentFile().exists()) vFile.getParentFile().mkdirs()
        vFile.withWriter {wr->
            wr.println "AVNAV_VERSION=\"$version\""
        }
    }
}


